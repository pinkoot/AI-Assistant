import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import requests
import hmac
import hashlib
import socket
import platform
import psutil
import uuid

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BASE_URL = "http://127.0.0.1:5000"
HMAC_KEY = "–Ω–µ–≥—Ä"
SECRET_KEY = "–Ω–µ–≥—Ä"

INPUT_QUERY, GET_LOCATION = range(2)


class VigenereCipher:
    def __init__(self, key: str):
        if not key:
            raise ValueError("–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        self.key = key.lower().replace(' ', '')
        self.alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789.,- '
        self.char_to_index = {char: i for i, char in enumerate(self.alphabet)}

    def encrypt(self, text: str) -> str:
        encrypted = []
        key_index = 0
        for char in text.lower():
            if char in self.alphabet:
                shift = self.char_to_index[self.key[key_index % len(self.key)]]
                encrypted_char = self.alphabet[(self.char_to_index[char] + shift) % len(self.alphabet)]
                encrypted.append(encrypted_char)
                key_index += 1
            else:
                encrypted.append(char)
        return ''.join(encrypted)

    def decrypt(self, text: str) -> str:
        decrypted = []
        key_index = 0
        for char in text.lower():
            if char in self.alphabet:
                shift = self.char_to_index[self.key[key_index % len(self.key)]]
                decrypted_char = self.alphabet[(self.char_to_index[char] - shift) % len(self.alphabet)]
                decrypted.append(decrypted_char)
                key_index += 1
            else:
                decrypted.append(char)
        return ''.join(decrypted)


class EncryptedClient:
    def __init__(self):
        self.cipher = VigenereCipher(SECRET_KEY)

    def encrypt_request(self, params):
        try:
            return {k: self.cipher.encrypt(str(v)) for k, v in params.items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return params

    def decrypt_response(self, data):
        try:
            if isinstance(data, dict):
                return {k: self.cipher.decrypt(v) for k, v in data.items()}
            return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
            return data

    def generate_hmac(self, data):
        return hmac.new(HMAC_KEY.encode(), str(data).encode(), hashlib.sha256).hexdigest()


class DeviceInfo:
    @staticmethod
    def get_device_info():
        try:
            hostname = socket.gethostname()
            ip_address = socket.gethostbyname(hostname)
            system_info = platform.uname()
            return {
                "hostname": hostname,
                "ip_address": ip_address,
                "system": system_info.system,
                "node_name": system_info.node,
                "release": system_info.release,
                "version": system_info.version,
                "machine": system_info.machine,
                "processor": system_info.processor,
                "cpu_count": psutil.cpu_count(logical=True),
                "memory_total": psutil.virtual_memory().total,
                "disk_usage": psutil.disk_usage('/').percent,
                "boot_time": psutil.boot_time(),
                "mac_address": ':'.join(
                    ['{:02x}'.format((uuid.getnode() >> ele) & 0xff) for ele in range(0, 8 * 6, 8)][::-1])
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
            return {}


class BaseClient:
    def __init__(self):
        self.encryption_handler = EncryptedClient()
        self.device_info = DeviceInfo.get_device_info()

    def _prepare_params(self, params):
        params = {k: str(v) for k, v in params.items()}
        combined = {**params, **self.device_info}
        encrypted = self.encryption_handler.encrypt_request(combined)

        return {
            "params": encrypted,
            "headers": {
                "X-HMAC-Signature": self.encryption_handler.generate_hmac(encrypted),
                "Content-Type": "application/json"
            }
        }

    def _process_response(self, response):
        try:
            response.raise_for_status()
            encrypted_data = response.json()
            return self.encryption_handler.decrypt_response(encrypted_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return {"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}


class TelegramBot(BaseClient):
    def __init__(self, token: str):
        super().__init__()
        self.application = Application.builder().token(token).build()
        self._register_handlers()

    def _main_keyboard(self):
        return ReplyKeyboardMarkup([
            ["üå§ –ü–æ–≥–æ–¥–∞", "üõç –¢–æ–≤–∞—Ä—ã"],
            ["üçî –ï–¥–∞", "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã"],
            ["üè® –û—Ç–µ–ª–∏", "üìç –ê–¥—Ä–µ—Å"],
            ["üåê –í–µ–±-–ø–æ–∏—Å–∫", "üîç –ú–µ—Å—Ç–∞"],
            ["üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫"]
        ], resize_keyboard=True)

    def _cancel_keyboard(self):
        return ReplyKeyboardMarkup([["üö´ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

    def _register_handlers(self):
        self.application.add_handler(CommandHandler("start", self._start))
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_main_menu)],
            states={
                INPUT_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_input)],
                GET_LOCATION: [
                    MessageHandler(filters.LOCATION, self._handle_location),
                    MessageHandler(filters.TEXT, self._handle_location_text)
                ]
            },
            fallbacks=[CommandHandler("cancel", self._cancel)],
        )

        self.application.add_handler(conv_handler)
        self.application.add_error_handler(self._error_handler)

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –µ–¥—É –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–æ–∏—Å–∫–æ–º –æ—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=self._main_keyboard()
        )
        return ConversationHandler.END

    async def _handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        context.user_data.clear()

        if text == "üå§ –ü–æ–≥–æ–¥–∞":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            return GET_LOCATION

        elif text == "üõç –¢–æ–≤–∞—Ä—ã":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "products"
            return INPUT_QUERY

        elif text == "üçî –ï–¥–∞":
            await update.message.reply_text("–ß—Ç–æ –∏—â–µ–º –∏–∑ –µ–¥—ã?", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "food"
            return INPUT_QUERY

        elif text == "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "restaurants"
            return GET_LOCATION

        elif text == "üè® –û—Ç–µ–ª–∏":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "hotels"
            return GET_LOCATION

        elif text == "üìç –ê–¥—Ä–µ—Å":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "address"
            return GET_LOCATION

        elif text == "üåê –í–µ–±-–ø–æ–∏—Å–∫":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "web"
            return INPUT_QUERY

        elif text == "üîç –ú–µ—Å—Ç–∞":
            await update.message.reply_text(
                "–ß—Ç–æ –∏—â–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–ø—Ç–µ–∫–∞, –±–∞–Ω–∫–æ–º–∞—Ç)",
                reply_markup=self._cancel_keyboard()
            )
            context.user_data["action"] = "places"
            return INPUT_QUERY

        elif text == "üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "exact"
            return INPUT_QUERY

        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text

        if text == "üö´ –û—Ç–º–µ–Ω–∞":
            return await self._cancel(update, context)

        action = context.user_data.get("action")
        query = text

        response = None
        try:
            base_params = {
                "user_id": update.message.from_user.id,
                "username": update.message.from_user.username,
                "first_name": update.message.from_user.first_name,
                "last_name": update.message.from_user.last_name,
            }

            if action == "products":
                prepared = self._prepare_params({**base_params, "query": query})
                response = requests.get(f"{BASE_URL}/search_products", **prepared)
                data = self._process_response(response)
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:\n\nüîó Ozon: {data['ozon_link']}\nüîó Wildberries: {data['wildberries_link']}"

            elif action == "food":
                prepared = self._prepare_params({**base_params, "query": query})
                response = requests.get(f"{BASE_URL}/search_food", **prepared)
                data = self._process_response(response)
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –µ–¥—ã:\n\nüîó –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç: {data['yandex_market_link']}\nüîó –°–±–µ—Ä–ú–∞—Ä–∫–µ—Ç: {data['sbermarket_link']}"

            elif action == "web":
                prepared = self._prepare_params({**base_params, "query": query})
                response = requests.get(f"{BASE_URL}/search_web", **prepared)
                data = self._process_response(response)
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\nüîç Google: {data['google_link']}\nüîç –Ø–Ω–¥–µ–∫—Å: {data['yandex_link']}"

            elif action == "places":
                context.user_data["query"] = query
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                        ["üö´ –û—Ç–º–µ–Ω–∞"]
                    ], resize_keyboard=True)
                )
                return GET_LOCATION

            elif action == "exact":
                prepared = self._prepare_params({**base_params, "query": query})
                response = requests.get(f"{BASE_URL}/search_exact", **prepared)
                data = self._process_response(response)
                if "error" in data:
                    message = "‚ùå " + data["error"]
                else:
                    message = (
                        f"üìç {data['name']}\n"
                        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
                        f"–†–µ–π—Ç–∏–Ω–≥: {data.get('rating', '–ù/–î')}\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {data['map_link']}"
                    )

            if response is not None and response.status_code != 200:
                message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"

        await update.message.reply_text(message, disable_web_page_preview=True)
        return await self._return_to_main(update)

    async def _handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            location = update.message.location
            action = context.user_data.get("action")

            lat = round(location.latitude, 6)
            lon = round(location.longitude, 6)

            base_params = {
                "user_id": update.message.from_user.id,
                "username": update.message.from_user.username,
                "first_name": update.message.from_user.first_name,
                "last_name": update.message.from_user.last_name,
                "lat": str(lat),
                "lon": str(lon),
                "action": action,
            }

            if action == "weather":
                prepared = self._prepare_params(base_params)
                response = requests.get(f"{BASE_URL}/get_weather", **prepared)
                data = self._process_response(response)
                message = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['city']}:\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n"
                    f"üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['feels_like']}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n"
                    f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {data['pressure']} hPa\n"
                    f"üå™ –í–µ—Ç–µ—Ä: {data['wind_speed']} –º/—Å\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
                )

            elif action == "restaurants":
                prepared = self._prepare_params(base_params)
                response = requests.get(f"{BASE_URL}/find_restaurants", **prepared)
                data = self._process_response(response)
                message = self._format_places(data, "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã")

            elif action == "hotels":
                prepared = self._prepare_params(base_params)
                response = requests.get(f"{BASE_URL}/find_hotels", **prepared)
                data = self._process_response(response)
                message = self._format_places(data, "–û—Ç–µ–ª–∏")

            elif action == "address":
                prepared = self._prepare_params(base_params)
                response = requests.get(f"{BASE_URL}/get_address", **prepared)
                data = self._process_response(response)
                message = f"üìç –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:\n{data.get('address', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {data.get('map_link', '')}"

            elif action == "places":
                query = context.user_data.get("query")
                prepared = self._prepare_params({**base_params, "query": query})
                response = requests.get(f"{BASE_URL}/find_places", **prepared)
                data = self._process_response(response)
                message = self._format_places(data, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

            if response.status_code != 200:
                message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"

        await update.message.reply_text(message, disable_web_page_preview=True)
        return await self._return_to_main(update)

    async def _handle_location_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text

        if text == "üö´ –û—Ç–º–µ–Ω–∞":
            return await self._cancel(update, context)

        city = text
        prepared = self._prepare_params({"q": city})
        response = requests.get(f"{BASE_URL}/get_weather", **prepared)
        data = self._process_response(response)

        if "error" in data:
            message = "‚ùå " + data["error"]
        else:
            message = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['city']}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n"
                f"üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['feels_like']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n"
                f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {data['pressure']} hPa\n"
                f"üå™ –í–µ—Ç–µ—Ä: {data['wind_speed']} –º/—Å\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
            )

        await update.message.reply_text(message)
        return await self._return_to_main(update)

    def _format_places(self, places, title):
        if not places:
            return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        message = [f"üè∑ {title}:"]
        for place in places[:5]:
            message.append(
                f"\nüìç {place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                f"–ê–¥—Ä–µ—Å: {place.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {place.get('rating', '–ù/–î')}\n"
                f"–°—Å—ã–ª–∫–∞: {place.get('map_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
            )
        return "\n".join(message)

    async def _return_to_main(self, update: Update):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _cancel(self, update: Update):
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error("–û—à–∏–±–∫–∞: %s", context.error, exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=self._main_keyboard())

    def run(self):
        self.application.run_polling()


if __name__ == "__main__":
    bot = TelegramBot("7828093872:AAGp7KAHGfnINWO2H27NXX8fvlh4XxZrWAU")
    bot.run()
